import React, { useState, useRef } from "react";
import { useNavigate } from "react-router-dom";
import Navbar from "./components/Navbar";

const HumanizerPage = () => {
  const [inputText, setInputText] = useState("");
  const [humanizedText, setHumanizedText] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState("English (US)");
  const [selectedMode, setSelectedMode] = useState("Basic");
  // State for sidebar selection - 'Humanizer' will be the default content shown
  const [selectedSidebarItem, setSelectedSidebarItem] = useState("Humanizer"); // Default active item

  const navigate = useNavigate();
  const fileInputRef = useRef(null);

  // --- IMPORTANT: Backend API URL ---
  // This URL MUST match where your Flask backend is running.
  // For local development, it's typically http://127.0.0.1:5000
  const BACKEND_API_URL = "http://127.0.0.1:5000";

  // --- handleHumanize function now calls the backend API ---
  const handleHumanize = async () => {
    // Made function async
    if (!inputText.trim()) {
      setHumanizedText("Please enter some text to humanize.");
      return;
    }
    setIsLoading(true);
    setHumanizedText(""); // Clear previous humanized text

    try {
      const response = await fetch(`${BACKEND_API_URL}/humanize`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ text: inputText }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(
          errorData.error || `HTTP error! status: ${response.status}`
        );
      }

      const data = await response.json();
      setHumanizedText(data.humanized_text);
    } catch (error) {
      console.error("Error humanizing text:", error);
      setHumanizedText(
        `Failed to humanize text: ${error.message}. Please try again.`
      );
    } finally {
      setIsLoading(false);
    }
  };

  const handleGoBack = () => {
    navigate("/");
  };

  const handleTrySampleText = () => {
    setInputText(
      "As an AI language model, I can tell you that it is important to provide clear and concise information to users. Additionally, it is beneficial to optimize for search engines. In conclusion, this text is generated by artificial intelligence and needs humanization."
    );
    setHumanizedText("");
  };

  const handlePasteText = async () => {
    try {
      const text = await navigator.clipboard.readText();
      setInputText(text);
      setHumanizedText("");
    } catch (err) {
      console.error("Failed to read clipboard contents: ", err);
      // Using setHumanizedText instead of alert()
      setHumanizedText("Failed to paste text. Please paste manually.");
    }
  };

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      if (file.type && !file.type.includes("text/plain")) {
        // Using setHumanizedText instead of alert()
        setHumanizedText(
          "Please upload a plain text (.txt) file for now. Support for other document types is coming soon!"
        );
        event.target.value = null;
        return;
      }

      const reader = new FileReader();
      reader.onload = (e) => {
        setInputText(e.target.result);
        setHumanizedText("");
      };
      reader.onerror = () => {
        setHumanizedText("Failed to read file. Please try again.");
      };
      reader.readAsText(file);
    }
    event.target.value = null;
  };

  // Central handler for sidebar icon clicks
  const handleSidebarClick = (label) => {
    setSelectedSidebarItem(label);
    // You can add specific logic here if needed per item
    // For now, it just changes the displayed content
    console.log(`${label} selected.`);
  };

  const SidebarIcon = ({ icon, label, isActive, onClick }) => (
    <div className={`sidebar-button-wrapper ${isActive ? "active" : ""}`}>
      <button
        onClick={onClick}
        className={`sidebar-button ${isActive ? "active" : ""}`}
      >
        <div className="size-6 icon-svg">{icon}</div>
        <span className="text-xs font-medium">{label}</span>
      </button>
    </div>
  );

  // --- Placeholder Components for Sidebar Content (unchanged) ---
  const HumanizerContent = () => (
    <>
      {/* Language Selection Tabs */}
      <div className="flex justify-start mb-6">
        {["English (AU)", "English (CA)", "English (UK)", "English (US)"].map(
          (lang) => (
            <button
              key={lang}
              onClick={() => setSelectedLanguage(lang)}
              className={`px-4 py-2 text-sm font-medium rounded-full transition-colors duration-200 ${
                selectedLanguage === lang
                  ? "bg-gray-200 text-gray-800"
                  : "text-white/70 hover:bg-white/20"
              }`}
            >
              {lang}
            </button>
          )
        )}
      </div>

      {/* Modes Tabs */}
      <div className="flex justify-start mb-6 border border-white/30 rounded-full p-1 self-start">
        {["Basic", "Advanced"].map((mode) => (
          <button
            key={mode}
            onClick={() => setSelectedMode(mode)}
            className={`px-5 py-2 text-sm font-medium rounded-full transition-colors duration-200 ${
              selectedMode === mode
                ? "bg-[#00B887] text-white"
                : "text-white/70 hover:bg-white/20"
            }`}
          >
            {mode}
          </button>
        ))}
      </div>

      {/* Textarea Input */}
      <div className="flex-1 relative border border-white/30 rounded-lg overflow-hidden flex flex-col">
        <textarea
          className="w-full flex-1 p-4 bg-transparent text-white resize-none outline-none focus:ring-0 placeholder-gray-400"
          placeholder="To Humanize text, enter or paste it here and press 'Humanize.'"
          value={inputText}
          onChange={(e) => setInputText(e.target.value)}
        ></textarea>
        <div className="absolute bottom-4 left-4 flex gap-3">
          <button
            onClick={handleTrySampleText}
            className="flex items-center gap-2 px-4 py-2 bg-white/20 text-[#00B887] border border-[#00B887]/50 rounded-full text-sm font-medium hover:bg-white/30 transition-colors duration-200"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-4 w-4"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
              <path d="M18.5 2.5L16 5l3 3 2.37-2.37a2.12 2.12 0 0 0-3-3z"></path>
            </svg>
            Try Sample Text
          </button>
          <button
            onClick={handlePasteText}
            className="flex items-center gap-2 px-4 py-2 bg-white/20 text-[#00B887] border border-[#00B887]/50 rounded-full text-sm font-medium hover:bg-white/30 transition-colors duration-200"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-4 w-4"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path>
              <rect x="8" y="2" width="8" height="4" rx="1" ry="1"></rect>
            </svg>
            Paste Text
          </button>
        </div>
      </div>

      {/* Humanized Output Area */}
      {humanizedText && (
        <div className="flex-1 relative border border-white/30 rounded-lg overflow-hidden flex flex-col mt-4">
          <textarea
            className="w-full flex-1 p-4 bg-transparent text-white resize-none outline-none read-only:cursor-text focus:ring-0 placeholder-gray-400"
            placeholder="Your humanized text will appear here."
            value={humanizedText}
            readOnly
          ></textarea>
        </div>
      )}

      {/* Bottom Buttons */}
      <div className="flex justify-between items-center mt-6 group">
        <button
          onClick={() => fileInputRef.current.click()}
          className="relative flex items-center gap-2 px-4 py-2 bg-white/10 text-[#00B887] border border-[#00B887]/30 rounded-full text-sm font-medium
                         transition-all duration-300 ease-in-out
                         hover:bg-white/20 hover:border-[#00B887]/50
                         shadow-md animate-button-glow-pulse
                         overflow-hidden"
        >
          <span className="absolute inset-x-0 bottom-0 h-0.5 bg-gradient-to-r from-[#00B887]/60 via-[#00B887]/30 to-transparent blur-sm opacity-0 group-hover:h-full group-hover:opacity-100 transition-all duration-500 ease-out"></span>

          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-4 w-4 z-10"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
          >
            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
            <polyline points="17 8 12 3 7 8"></polyline>
            <line x1="12" y1="3" x2="12" y2="15"></line>
          </svg>
          <span className="z-10">Upload Doc</span>
        </button>
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileUpload}
          className="hidden"
          accept=".txt"
        />
        <button
          onClick={handleHumanize}
          disabled={isLoading}
          className="flex min-w-[150px] items-center justify-center rounded-full h-12 px-8
                     bg-[#00B887] text-white text-lg font-bold
                     hover:bg-[#00A07A]
                     transition-colors duration-300 disabled:opacity-50 disabled:cursor-not-allowed
                     humanize-button-with-neon-sweep
                    "
        >
          {isLoading ? "Humanizing..." : "Humanize"}
        </button>
      </div>
    </>
  );

  const HistoryContent = () => (
    <div className="flex-1 flex flex-col justify-center items-center text-white/70">
      <h2 className="text-2xl font-bold mb-4">Your Humanization History</h2>
      <p className="text-center">
        This is where you'll see a log of your past humanized texts.
      </p>
      <p className="text-center mt-2 text-sm text-white/50">
        (Feature under development: Display recent activities here.)
      </p>
    </div>
  );

  const StatisticsContent = () => (
    <div className="flex-1 flex flex-col justify-center items-center text-white/70">
      <h2 className="text-2xl font-bold mb-4">Usage Statistics</h2>
      <p className="text-center">
        Track your humanization usage, word counts, and more.
      </p>
      <p className="text-center mt-2 text-sm text-white/50">
        (Feature under development: Graphs and data about your usage.)
      </p>
    </div>
  );

  const ToneContent = () => (
    <div className="flex-1 flex flex-col justify-center items-center text-white/70">
      <h2 className="text-2xl font-bold mb-4">Tone Settings</h2>
      <p className="text-center">
        Adjust the output tone for your humanized text (e.g., formal, informal,
        neutral).
      </p>
      <p className="text-center mt-2 text-sm text-white/50">
        (Feature under development: Tone sliders and presets.)
      </p>
    </div>
  );

  const SettingsContent = () => (
    <div className="flex-1 flex flex-col justify-center items-center text-white/70">
      <h2 className="text-2xl font-bold mb-4">Application Settings</h2>
      <p className="text-center">
        Manage your preferences, account details, and integrations.
      </p>
      <p className="text-center mt-2 text-sm text-white/50">
        (Feature under development: User profiles, API keys, etc.)
      </p>
    </div>
  );

  const FeedbackContent = () => (
    <div className="flex-1 flex flex-col justify-center items-center text-white/70">
      <h2 className="text-2xl font-bold mb-4">Provide Feedback</h2>
      <p className="text-center">
        Help us improve by sharing your thoughts and suggestions.
      </p>
      <button className="mt-6 px-6 py-3 bg-[#00B887] text-white rounded-full font-bold hover:bg-[#00A07A] transition-colors">
        Open Feedback Form
      </button>
      <p className="text-center mt-2 text-sm text-white/50">
        (Feature under development: An actual feedback submission form.)
      </p>
    </div>
  );

  const HotkeysContent = () => (
    <div className="flex-1 flex flex-col justify-center items-center text-white/70">
      <h2 className="text-2xl font-bold mb-4">Keyboard Shortcuts</h2>
      <p className="text-center">
        View and customize keyboard shortcuts for faster workflow.
      </p>
      <ul className="mt-4 text-left">
        <li>Ctrl/Cmd + H: Humanize</li>
        <li>Ctrl/Cmd + S: Save Draft</li>
        <li>Ctrl/Cmd + P: Paste Text</li>
      </ul>
      <p className="text-center mt-2 text-sm text-white/50">
        (Feature under development: Comprehensive list and customization.)
      </p>
    </div>
  );

  // Function to render the correct content based on selectedSidebarItem
  const renderMainContent = () => {
    switch (selectedSidebarItem) {
      case "Humanizer":
        return <HumanizerContent />;
      case "History":
        return <HistoryContent />;
      case "Statistics":
        return <StatisticsContent />;
      case "Tone":
        return <ToneContent />;
      case "Settings":
        return <SettingsContent />;
      case "Feedback":
        return <FeedbackContent />;
      case "Hotkeys":
        return <HotkeysContent />;
      default:
        return <HumanizerContent />;
    }
  };

  return (
    <div
      className="relative flex size-full min-h-screen flex-col text-gray-800"
      style={{ fontFamily: '"Space Grotesk", "Noto Sans", sans-serif' }}
    >
      <Navbar />

      {/* Page Header (below Navbar) */}
      <header className="py-8 px-4 sm:px-6 lg:px-8 text-center pt-24">
        <h1 className="text-3xl sm:text-4xl font-bold leading-tight tracking-[-0.015em] text-white mb-2">
          Humanize AI Text with{" "}
          <span className="text-[#00B887]">Humanizer AI's</span> AI Humanizer
        </h1>
        <p className="text-base text-gray-300">
          Paste your content below to humanize AI-generated text with Humanizer
          AI's AI Humanizer.
        </p>
      </header>

      {/* Main Content Area - Glass Effect Here */}
      <div className="flex-1 flex justify-center p-4 sm:p-6 lg:p-8 group">
        <div
          className="bg-white/10 backdrop-blur-lg rounded-xl shadow-lg flex w-full max-w-7xl relative min-h-[700px] border border-white/20
                     transition-all duration-300 ease-in-out transform
                     group-hover:scale-[1.005]
                     group-hover:shadow-neon-box-glow
                     group-hover:border-[#00B887]
                     "
        >
          {/* Left Main Pane - This is where content changes */}
          <div className="flex-1 p-6 flex flex-col">{renderMainContent()}</div>

          {/* Right Sidebar */}
          <div className="w-24 border-l border-white/20 flex flex-col py-6 items-center gap-4">
            {/* Added a specific icon for the main Humanizer section */}
            <SidebarIcon
              icon={
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-full w-full"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                  <polyline points="14 2 14 8 20 8"></polyline>
                  <line x1="16" y1="13" x2="8" y2="13"></line>
                  <line x1="16" y1="17" x2="8" y2="17"></line>
                  <line x1="10" y1="9" x2="9" y2="9"></line>
                </svg>
              }
              label="Humanizer"
              isActive={selectedSidebarItem === "Humanizer"}
              onClick={() => handleSidebarClick("Humanizer")}
            />
            <SidebarIcon
              icon={
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-full w-full"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                  <polyline points="7 10 12 15 17 10"></polyline>
                  <line x1="12" y1="15" x2="12" y2="3"></line>
                </svg>
              }
              label="History"
              isActive={selectedSidebarItem === "History"}
              onClick={() => handleSidebarClick("History")}
            />
            <SidebarIcon
              icon={
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-full w-full"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <path d="M12 20V10"></path>
                  <path d="M18 20V4"></path>
                  <path d="M6 20v-4"></path>
                </svg>
              }
              label="Statistics"
              isActive={selectedSidebarItem === "Statistics"}
              onClick={() => handleSidebarClick("Statistics")}
            />
            <SidebarIcon
              icon={
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-full w-full"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <path d="M8 7H5c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2v-3"></path>
                  <path d="M18.37 3.63L16 6l3 3 2.37-2.37a2.12 2.12 0 0 0-3-3z"></path>
                </svg>
              }
              label="Tone"
              isActive={selectedSidebarItem === "Tone"}
              onClick={() => handleSidebarClick("Tone")}
            />
            <SidebarIcon
              icon={
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-full w-full"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <circle cx="12" cy="12" r="3"></circle>
                  <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0-.33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0 .33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09z"></path>
                </svg>
              }
              label="Settings"
              isActive={selectedSidebarItem === "Settings"}
              onClick={() => handleSidebarClick("Settings")}
            />
            <SidebarIcon
              icon={
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-full w-full"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <path d="M21 11.5a2.5 2.5 0 0 0-5 0v4.5V13a3 3 0 0 0-3-3H7a3 3 0 0 0-3 3v2l-2 3h18l-2-3h-4"></path>
                  <line x1="12" y1="12" x2="12" y2="12"></line>
                </svg>
              }
              label="Feedback"
              isActive={selectedSidebarItem === "Feedback"}
              onClick={() => handleSidebarClick("Feedback")}
            />
            <SidebarIcon
              icon={
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-full w-full"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <circle cx="12" cy="12" r="10"></circle>
                  <path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path>
                  <line x1="12" y1="17" x2="12" y2="17"></line>
                </svg>
              }
              label="Hotkeys"
              isActive={selectedSidebarItem === "Hotkeys"}
              onClick={() => handleSidebarClick("Hotkeys")}
            />
          </div>
        </div>
      </div>

      {/* Go Back to Home Button */}
      <div className="flex justify-center py-4">
        <button
          onClick={handleGoBack}
          className="flex min-w-[120px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-full h-10 px-5 bg-gray-200 text-gray-700 text-sm font-bold leading-normal tracking-[0.015em] border border-gray-300 shadow-sm hover:bg-gray-300 transition-all duration-300 transform hover:scale-105 active:scale-95 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-opacity-75"
        >
          <span className="truncate">Go Back to Home</span>
        </button>
      </div>
      <p className="text-gray-500 text-xs mt-2 mb-4 text-center">
        *Disclaimer: This is a simulated humanization. A real advanced humanizer
        uses complex AI/ML models typically running on a powerful backend
        server.
      </p>
    </div>
  );
};

export default HumanizerPage;
